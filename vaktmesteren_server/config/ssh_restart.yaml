# SSH Restart Configuration
# This configuration defines how to restart Linux services via SSH when Icinga2 alerts trigger
#
# FEATURES:
# 1. Host-based Connection Mapping: Connections can be found by hostname from Icinga2
# 2. Automatic Connection Selection: Rules automatically select SSH connection by hostname
# 3. systemd_unit_unit Auto-detection: Service names automatically extracted from Icinga2 variables
# 4. DEFAULT RESTART BEHAVIOR: All services with systemd_unit_unit get automatic restart capability
# 5. Rule-based Override: Explicit rules provide fine-grained control for critical services

# Global settings
enabled: true
logOnly: true  # Set to false to enable real SSH execution (use with caution!)

# SSH Connection definitions
# Host-based connection mapping: connection name matches hostname for automatic selection
connections:
  # Host-based connection mapping - connection name matches hostname from Icinga2
  # This allows automatic connection selection when using sshConnectionName: "auto"
  ghrunner.grsoft.no:
    host: "ghrunner.grsoft.no"
    port: 22
    username: "monitoring"
    privateKeyPath: "/etc/ssh/monitoring_key"
    timeoutSeconds: 30

  web-prod-01.example.com:
    host: "web-prod-01.example.com"
    port: 22
    username: "monitoring"
    privateKeyPath: "/etc/ssh/monitoring_key"
    timeoutSeconds: 30

  db.example.com:
    host: "db.example.com"
    port: 22
    username: "monitoring"
    privateKeyPath: "/etc/ssh/monitoring_key"
    timeoutSeconds: 30

  # Default connection template for automatic dynamic connections
  # When using sshConnectionName: "auto" and no specific connection is found for a hostname,
  # this template is used to create a dynamic connection with the actual Icinga2 hostname
  default:
    host: "template-will-use-icinga2-hostname"  # Gets replaced with actual hostname
    port: 22
    username: "monitoring"
    privateKeyPath: "/etc/ssh/monitoring_key"
    timeoutSeconds: 30

# Restart rules - explicit configuration for services requiring special treatment
# 
# RULE BEHAVIOR:
# - Services WITH explicit rules: Use configured settings (maxRestarts, cooldownMinutes, pre/post checks)
# - Services WITHOUT explicit rules: Use conservative default behavior (3 attempts, 10min cooldown, basic check)
# 
# All services detected via systemd_unit_unit will be automatically restartable.
# Only configure explicit rules for services that need special treatment (databases, critical services, etc.)
# 
# NOTE: maxRestarts counter resets to 0 whenever Icinga2 state changes from CRITICAL back to OK
rules:
  # EXAMPLE RULES - These demonstrate explicit configuration for services requiring special treatment
  # Most services will use default behavior (2/hour, 10min cooldown, basic check)
  # Only add explicit rules for services that need custom settings
  
  # Auto-detected service from systemd_unit_unit variable
  - systemdServiceName: "ser2net"          # Matches systemd_unit_unit: "ser2net" from Icinga2
    enabled: true                          # Host: ghrunner.grsoft.no -> Connection: "ghrunner.grsoft.no"
    maxRestarts: 2                         # Allow 2 restart attempts (resets when state changes from CRITICAL to OK)
    cooldownMinutes: 15                    # Cooldown window (minutes) between restart attempts for this service.
                                          # Meaning:
                                          # - After a restart attempt is performed, the system will wait
                                          #   at least this many minutes before attempting another restart
                                          #   for the same service on the same host.
                                          # - The `maxRestarts` counter counts attempts inside a higher-level
                                          #   incident window (resets when Icinga2 state returns to OK).
                                          # - Example: With `maxRestarts: 2` and `cooldownMinutes: 15`,
                                          #   the service will be restarted up to 2 times; if the first
                                          #   attempt happens at 10:00 and fails, the next attempt will
                                          #   not be scheduled before 10:15.
                                          # - Use larger values for hardware or stateful services to avoid
                                          #   rapid repeat restarts (which can cause instability).
    preChecks:                             # Commands to run before restart
      - "sudo systemctl is-failed ser2net || true"  # Check if service is failed
      - "sudo netstat -ln | grep :2000 || true"     # Check if port is still bound
    postChecks:                            # Commands to run after restart
      - "sudo systemctl is-active ser2net" # Verify service is running
      - "sleep 3 && sudo netstat -ln | grep :2000"  # Verify port is listening

  # Auto-detected nginx service
  - systemdServiceName: "nginx"             # Matches systemd_unit_unit: "nginx" from Icinga2
    enabled: true                           # Host: web-prod-01.example.com -> Connection: "web-prod-01.example.com"
    maxRestarts: 3                          # Allow 3 restart attempts (resets when state changes from CRITICAL to OK)
    cooldownMinutes: 10                     # Cooldown window (minutes) between restart attempts for this service.
                                          # Shorter duration here because web-services restart quickly
                                          # and are less likely to require long recovery times.
    preChecks:                              # Commands to run before restart
      - "sudo nginx -t"                     # Test nginx config
    postChecks:                             # Commands to run after restart
      - "sudo systemctl is-active nginx"    # Verify service is running

  # Auto-detected PostgreSQL service
  - systemdServiceName: "postgresql"       # Matches systemd_unit_unit: "postgresql" from Icinga2
    enabled: true
    maxRestarts: 1                         # Very conservative for database (resets when state changes from CRITICAL to OK)
    cooldownMinutes: 30                    # Long cooldown (minutes) between restart attempts.
                                          # Databases are statefulâ€”use a long cooldown to allow recovery
                                          # and prevent repeated restarts that may cause corruption.
    preChecks:
      - "sudo systemctl is-failed postgresql || true"
      - "sudo -u postgres psql -c 'SELECT 1;' || true"  # Test database connectivity
    postChecks:
      - "sudo systemctl is-active postgresql"
      - "sleep 5 && sudo -u postgres psql -c 'SELECT version();'"

# HOW IT WORKS (AUTO-DETECTION WITH DEFAULT BEHAVIOR):
# 
# 1. SERVICE WITH EXPLICIT RULE:
#    - Define connection: "ghrunner.grsoft.no" (connection name = hostname)
#    - Rule has: systemdServiceName: "ser2net" (with custom settings)
#    - Icinga2 sends: Host: "ghrunner.grsoft.no", systemd_unit_unit: "ser2net"
#    - Result: Uses explicit rule settings (2 attempts, 15min cooldown, custom pre/post checks)
#
# 2. SERVICE WITHOUT EXPLICIT RULE (DEFAULT BEHAVIOR):
#    - No rule defined for service
#    - Icinga2 sends: Host: "server.example.com", systemd_unit_unit: "unknown-service"
#    - Result: Uses conservative defaults (3 attempts, 10min cooldown, basic post-check only)
#    - Connection: Auto-selected by hostname or created dynamically
#
# 3. DYNAMIC CONNECTION CREATION:
#    - Icinga2 sends: Host: "new-server.example.com", systemd_unit_unit: "any-service"
#    - No connection found for "new-server.example.com"
#    - System creates: Connection using "default" template + actual hostname
#    - Result: SSH to monitoring@new-server.example.com:22 with /etc/ssh/monitoring_key
#
# 4. DEFAULT RESTART BEHAVIOR SUMMARY:
#    - ALL services with systemd_unit_unit are automatically restartable
#    - Services WITHOUT explicit rules get conservative defaults:
#      * Max restarts: 3 attempts (resets when Icinga state changes from CRITICAL to OK)
#      * Cooldown: 10 minutes
#      * Pre-checks: None
#      * Post-checks: sudo systemctl is-active servicename
#    - Services WITH explicit rules use their configured settings
#    - No configuration required for basic restart capability
#
# AUTOMATIC CONNECTION SELECTION (DEFAULT BEHAVIOR):
#    1. Look for connection named exactly like the Icinga2 hostname  
#    2. Look for connection where host field matches Icinga2 hostname exactly
#    3. Use "default" connection as template + actual Icinga2 hostname
#    4. Create dynamic connection with standard defaults + actual Icinga2 hostname